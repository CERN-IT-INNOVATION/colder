
import cupy
import cupyx

from colder.core.physics import hamiltonian, hamiltonian_collection
import colder.core.quantum.cupy as cqs

from typing import Tuple, List, Union


class interface:
    
    __operator_associations : dict = { 'X' : cqs.operators.X, 'Y' : cqs.operators.Y, 'Z' : cqs.operators.Z }
    
    def __init__(self, nqubits : int, hh : Union[hamiltonian, hamiltonian_collection]):
        
        # store internally the target hamiltonian objects
        self.hobjs : list = []
        self.nqubits : int = nqubits
        
        self.__core = cqs.quantum_sparse(size = nqubits, local_dim=2)
        
        if isinstance(hh, hamiltonian_collection):
            # hamiltonian collections are unwrapped
            self.hobjs += hh.terms
        elif isinstance(hh, hamiltonian):
            # hamiltonian terms are just appended
            self.hobjs.append(hh)
        else:
            raise Exception('unknown input type')
    
    
    def __compute_hamiltonian(self, hh : hamiltonian) -> cupyx.scipy.sparse.spmatrix:
        """
        Compute single hamiltonian term.

        Args:
            hh (hamiltonian): hamiltonian object

        Returns:
            scipy.sparse.spmatrix: _description_
        """
        op_string : str = hh.operator
        op_matrices : list = [ self.__operator_associations[ii] for ii in op_string ]
        
        target_coeffs = hh.target_coeffs
        if target_coeffs is None:  target_coeffs = cupy.ones(hh.n_terms)
        
        result = 0
        for coeff, targ in zip(target_coeffs, hh.targets):
            combs : list = [ x for x in zip(op_matrices, targ) ]
            sorted_combs = sorted(combs, key = lambda x: x[1])
            
            result += coeff*self.__core.kron_list( [ el[0] for el in sorted_combs ], sites = [ el[1] for el in sorted_combs ] )
        
        return result

    def compute_timeindependent_hamiltonians(self) -> List[cupyx.scipy.sparse.spmatrix]:
        return [ self.__compute_hamiltonian(hh) for hh in self.hobjs ]
    
    def compute_timeindependent_hamiltonians_with_coeff(self) -> List[ Tuple[str,cupyx.scipy.sparse.spmatrix] ]:
        return [ (hh.coeff, self.__compute_hamiltonian(hh)) for hh in self.hobjs ]
    
    def finalize(self, matrix : cupyx.scipy.sparse.spmatrix) -> cupyx.scipy.sparse.spmatrix:
        return matrix
    
    def COLD_make_hamiltonian(self):
        return self.compute_timeindependent_hamiltonians_with_coeff()
    
    def COLD_get_finalize_method(self) -> callable:
        finalize = lambda m : m
        return finalize

    
    