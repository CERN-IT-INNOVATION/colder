
import cupy
import cupyx

from typing import Tuple, List, Union



def get_groundstate_superposition(hh, n_eig : int = 8, method : str = 'dense', print_info : bool = False):
    
    assert method in ['sparse', 'dense'], 'unknown eigenvalue routine method'
    
    if method == 'sparse':
        # ref: https://docs.cupy.dev/en/stable/reference/generated/cupyx.scipy.sparse.linalg.eigsh.html
        evals, evect = cupyx.scipy.sparse.linalg.eigsh(hh, k=n_eig, which='SA', tol = 10**-8)
        
    elif method == 'dense':
        matrix = hh.todense()
        #evals, evect = scipy.linalg.eigh(matrix, subset_by_index = (0,n_eig)) # FIXME
        evals, evect = cupy.linalg.eigh( matrix )

    mask : cupy.ndarray = (evals == evals[0])
    n_superposition : int = cupy.sum(mask)
    gs : cupy.ndarray = cupy.sum( evect[:,mask].T, axis = 0)/cupy.sqrt(n_superposition)
    
    if (n_superposition == n_eig) and (n_eig != 1):
        print('warning: Number of selected eigenvectors is equal to max allowed eigenvalues. There might be more states with this eigenvalue.')
    if print_info:
        print('[info] gs is superposition of {} states'.format(n_superposition) )
    
    return gs



def timedependent_evolution(htf : callable, T : float, P : int, psi0 : Union[cupy.ndarray, str] = 'superpos', gs_args : dict = {}, force_norm : bool = True):
    """Execute a time evolution. The Hamiltonian is a callable function of time H(t)."""
    
    # compute ground state of ht(0) to initialize the state, if not provided
    if isinstance(psi0, str):
        if psi0 == 'superpos':
            psi0 = get_groundstate_superposition( htf(0), *gs_args )
        elif psi0 == 'single':
            psi0 = get_groundstate_superposition( htf(0), n_eig=1, *gs_args )
        else:
            raise Exception(psi0 + ' is not valid string identifier for psi0')
    
    state = psi0
    time = cupy.linspace(0,T,P+1)
    dt = cupy.mean( cupy.diff(time) )
    
    time = cupy.asnumpy( time )
    # fix: this makes the argument of Ht be a numpy value instead of a cupy value
    
    def _single_step_dense(Ht, state):
        evals, evect = cupy.linalg.eigh( Ht.todense() )
        U = cupy.exp( -1.j*evals*dt )
        return cupy.dot(evect, U * cupy.dot(evect.transpose().conjugate(), state))
    
    for t in time[1:]:
        state = _single_step_dense( htf(t), state)
        if force_norm: state = state/(state @ state.conj())
    return state



def fidelity(psi : cupy.ndarray, chi : cupy.ndarray):
    cc = psi @ chi.conj()
    fid = cupy.real( cc * cc.conj() )
    return fid.item()